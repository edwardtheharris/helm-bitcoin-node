###
# ```{rubric} Default Values
# ```
# ---
# Default values for the Helm bitcoin-node chart.
#
# This is a YAML-formatted file.
#
# Declare variables to be passed into your bitcoin-nodes.
#
# ```{literalinclude} /values.yaml
# :caption: affinity
# :language: yaml
# :start-at: "affinity:\n"
# :end-before: "###\n"
# ```
affinity:
  nodeAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
    - matchExpressions:
      - key: kubernetes.io/os
        operator: In
        values:
        - linux

###
# ```{rubric} Full Name Override
# ```
# ---
# Override the full name of the release.
#
# ```{literalinclude} /values.yaml
# :caption: fullname override
# :language: yaml
# :start-at: "fullnameOverride: \"bitcoin\"\n"
# :end-before: "###\n"
# ```
fullnameOverride: "bitcoin"

###
# ```{rubric} Container image settings
# ```
# ---
# Define the image, tag and repository to be deployed.
#
# ```{literalinclude} /values.yaml
# :caption: image
# :language: yaml
# :start-at: "image:\n"
# :end-before: "###\n"
# ```
image:
  pullPolicy: Always
  repository: edwardtheharris/bitcoin-node
  # Overrides the image tag whose default is the chart appVersion.
  tag: '0.0.1'

###
# ```{rubric} Ingress
# ```
# ---
# Configure Ingress for the service.
#
# ```{literalinclude} /values.yaml
# :caption: ingress
# :language: yaml
# :start-at: "ingress:\n"
# :end-before: "###\n"
# ```
#
# ```{code-block} yaml
# :caption: tls example
# tls:
#  - secretName: chart-example-tls
#    hosts:
#      - chart-example.local
# ```
ingress:
  annotations: {}
  className: nginx
  enabled: true
  externalIPs: []
  hosts:
  - host: bitcoin.breeze-blocks.net
    paths:
    - path: /
      pathType: Prefix
      port: 8333
      serviceName: bitcoin
  loadBalancerIP: ''
  secret:
    enabled: false
    crt: ''
    key: ''
  tls: []
labels:
  node: k8s10.breeze-blocks.net

###
# ```{rubric} Liveness Probe
# ```
# ---
# Set a command to test for liveness.
#
# ```{literalinclude} /values.yaml
# :caption: liveness probe
# :language: yaml
# :start-at: "livenessProbe:\n"
# :end-before: "###\n"
# ```
livenessProbe:
  exec:
    command:
    - /usr/sbin/bitcoind
    - status
  # When to give up and restart the container
  failureThreshold: 3
  # Delay before the first probe is initiated
  initialDelaySeconds: 30
  # How often to perform the probe
  periodSeconds: 10
  # Minimum consecutive successes for the probe to
  # be considered successful after having failed
  successThreshold: 1
  # When the probe times out
  timeoutSeconds: 5

###
# ```{rubric} Name Override
# ```
# ---
# Override the release name, but not quite all the way.
#
# ```{literalinclude} /values.yaml
# :caption: name override
# :language: yaml
# :start-at: "nameOverride: \"bitcoin\"\n"
# :end-before: "###\n"
# ```
nameOverride: "bitcoin"

###
# ```{rubric} Node Selector
# ```
# ---
# Select nodes for workloads to run on.
#
# ```{literalinclude} /values.yaml
# :caption: affinity
# :language: yaml
# :start-at: "nodeSelector:\n"
# :end-before: "###\n"
# ```
nodeSelector:
  kubernetes.io/node: k8s10.breeze-blocks.net

###
# ```{rubric} Persistence Configuration
# ```
# ---
# Provision persistent storage if required.
#
# ```{literalinclude} /values.yaml
# :caption: persistence
# :language: yaml
# :start-at: "persistence:\n"
# :end-before: "###\n"
# ```
persistence:
  claim:
    enabled: true
  name: bitcoin
  storage:
    request: 500Gi
    limit: 900Gi
  storageClass: csi-lvm-linear

###
# ```{rubric} Pod Annotations
# ```
# ---
# Apply these annotations to all pods.
#
# ```{literalinclude} /values.yaml
# :caption: pod annotations
# :language: yaml
# :start-at: "podAnnotations: {}\n"
# :end-before: "###\n"
# ```
podAnnotations: {}

###
# ```{rubric} Pod Labels
# ```
# ---
# Apply these labels to all pods.
#
# ```{literalinclude} /values.yaml
# :caption: pod labels
# :language: yaml
# :start-at: "podLabels:\n"
# :end-before: "###\n"
# ```
podLabels:
  app.kubernetes.io/name: bitcoin

###
# ```{rubric} Pod Security Context
# ```
# ---
# Define security context for pods.
#
# ```{literalinclude} /values.yaml
# :caption: pod security context
# :language: yaml
# :start-at: "podSecurityContext: {}\n"
# :end-before: "###\n"
# ```
#
# ```{code-block} yaml
# :caption: pod security context EXAMPLE
#
# podSecurityContext:
#  fsGroup: 1000
# ```
podSecurityContext: {}

###
# ```{rubric} Replica Count
# ```
# ---
# Deploy this many replicas by default.
#
# ```{literalinclude} /values.yaml
# :caption: replicas
# :language: yaml
# :start-at: "replicaCount: 1\n"
# :end-before: "###\n"
# ```
# readinessProbe:
#   exec:
#     command:
#     - pg_isready
#     - -U
#     - postgres
#   failureThreshold: 3 # When to give up, marking the Pod as Unready
#   initialDelaySeconds: 5 # Delay before the first probe is initiated, can be shorter than liveness probe
#   periodSeconds: 5 # How often to perform the probe
#   successThreshold: 1 # Minimum consecutive successes for the probe to be considered successful
#   timeoutSeconds: 1 # When the probe times out
replicaCount: 1

###
# ```{rubric} Resource Requests and Limits
# ```
# ---
# Set requests and limits for workload resources.
#
# ```{literalinclude} /values.yaml
# :caption: resources
# :language: yaml
# :start-at: "resources:\n"
# :end-before: "###\n"
# ```
#
# We usually recommend not to specify default resources and to leave this as
# a conscious choice for the user. This also increases chances charts run on
# environments with little resources, such as Minikube. If you do want to
# specify resources, uncomment the following lines, adjust them as necessary,
# and remove the curly braces after `resources:`{l=yaml}.
#
# ```{code-block} yaml
# :caption: resources example
#
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
# ```
resources:
  limits:
    cpu: 2
    memory: 4096Mi

###
# ```{rubric} Security Context
# ```
# ---
# Set a security context on the workloads.
#
# ```{literalinclude} /values.yaml
# :caption: securityContext
# :language: yaml
# :start-at: "securityContext: {}\n"
# :end-before: "###\n"
# ```
securityContext: {}

###
# ```{rubric} Service
# ```
# ---
# Define the service used to access the application.
#
# ```{literalinclude} /values.yaml
# :caption: service
# :language: yaml
# :start-at: "service:\n"
# :end-before: "###\n"
# ```
#
# ```{code-block} yaml
# :caption: capabilities example
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000
# ```
service:
  enabled: true
  rest:
    name: rest
    port: 8333
    protocol: TCP
    targetPort: 8333
  rpc:
    enabled: true
    name: rpc
    port: 8334
    protocol: TCP
    targetPort: 8334
  type: LoadBalancer

###
# ```{rubric} Service Account
# ```
# ---
# When enabled, will create a Kubernetes Service Account during deployment.
#
# ```{literalinclude} /values.yaml
# :caption: serviceAccount
# :language: yaml
# :start-at: "serviceAccount:\n"
# :end-before: "###\n"
# ```
serviceAccount:
  # Annotations to add to the service account
  annotations:
    app.kubernetes.io/name: bitcoin
    app.kubernetes.io/instance: bitcoin
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname bitcoin-node
  name: "bitcoin"
statefulset:
  replicas: 1

###
# ```{rubric} Tolerations
# ```
# ---
# Define taints that will be tolerated to run workloads on nodes.
#
# ```{literalinclude} /values.yaml
# :caption: tolerations
# :language: yaml
# :start-at: "tolerations: []\n"
# :end-before: "###\n"
# ```
tolerations: []

###
# ```{rubric} Type
# ```
# ---
# May be set to `Deployment` or `StatefulSet`.
#
# ```{literalinclude} /values.yaml
# :caption: type
# :language: yaml
# :start-at: "type: StatefulSet\n"
# :end-before: "###\n"
# ```
type: StatefulSet

###
# ```{rubric} Volume Mounts
# ```
# ---
# Additional volumeMounts on the output Deployment definition.
#
# ```{literalinclude} /values.yaml
# :caption: volume mounts
# :language: yaml
# :start-at: "volumeMounts: []\n"
# :end-before: "###\n"
# ```
#
# ```{code-block} yaml
# :caption: volumeMounts example
# - mountPath: "/mnt/k8s/psql"
#   name: data
#   readOnly: false
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
# ```
volumeMounts: []

###
# ```{rubric} Volumes
# ```
# ---
# Additional volumes on the output Deployment definition.
#
# ```{literalinclude} /values.yaml
# :caption: volumes
# :language: yaml
# :start-at: "volumes: []\n"
# ```
#
# ```{code-block} yaml
# :caption: volume example
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false
# ```
volumes: []
